// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player_script.proto

#include "player_script.pb.h"
#include "player_script.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace guldan {

static const char* PlayerScript_method_names[] = {
  "/guldan.PlayerScript/OnGiveXP",
};

std::unique_ptr< PlayerScript::Stub> PlayerScript::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerScript::Stub> stub(new PlayerScript::Stub(channel));
  return stub;
}

PlayerScript::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnGiveXP_(PlayerScript_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerScript::Stub::OnGiveXP(::grpc::ClientContext* context, const ::guldan::OnGiveXPRequest& request, ::guldan::OnGiveXPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnGiveXP_, context, request, response);
}

void PlayerScript::Stub::experimental_async::OnGiveXP(::grpc::ClientContext* context, const ::guldan::OnGiveXPRequest* request, ::guldan::OnGiveXPResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnGiveXP_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::guldan::OnGiveXPResponse>* PlayerScript::Stub::AsyncOnGiveXPRaw(::grpc::ClientContext* context, const ::guldan::OnGiveXPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::guldan::OnGiveXPResponse>::Create(channel_.get(), cq, rpcmethod_OnGiveXP_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::guldan::OnGiveXPResponse>* PlayerScript::Stub::PrepareAsyncOnGiveXPRaw(::grpc::ClientContext* context, const ::guldan::OnGiveXPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::guldan::OnGiveXPResponse>::Create(channel_.get(), cq, rpcmethod_OnGiveXP_, context, request, false);
}

PlayerScript::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerScript_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerScript::Service, ::guldan::OnGiveXPRequest, ::guldan::OnGiveXPResponse>(
          std::mem_fn(&PlayerScript::Service::OnGiveXP), this)));
}

PlayerScript::Service::~Service() {
}

::grpc::Status PlayerScript::Service::OnGiveXP(::grpc::ServerContext* context, const ::guldan::OnGiveXPRequest* request, ::guldan::OnGiveXPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace guldan

