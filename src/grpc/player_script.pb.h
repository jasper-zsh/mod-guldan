// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_script.proto

#ifndef PROTOBUF_INCLUDED_player_5fscript_2eproto
#define PROTOBUF_INCLUDED_player_5fscript_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_5fscript_2eproto 

namespace protobuf_player_5fscript_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_5fscript_2eproto
namespace guldan {
class OnGiveXPRequest;
class OnGiveXPRequestDefaultTypeInternal;
extern OnGiveXPRequestDefaultTypeInternal _OnGiveXPRequest_default_instance_;
class OnGiveXPResponse;
class OnGiveXPResponseDefaultTypeInternal;
extern OnGiveXPResponseDefaultTypeInternal _OnGiveXPResponse_default_instance_;
}  // namespace guldan
namespace google {
namespace protobuf {
template<> ::guldan::OnGiveXPRequest* Arena::CreateMaybeMessage<::guldan::OnGiveXPRequest>(Arena*);
template<> ::guldan::OnGiveXPResponse* Arena::CreateMaybeMessage<::guldan::OnGiveXPResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace guldan {

// ===================================================================

class OnGiveXPRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guldan.OnGiveXPRequest) */ {
 public:
  OnGiveXPRequest();
  virtual ~OnGiveXPRequest();

  OnGiveXPRequest(const OnGiveXPRequest& from);

  inline OnGiveXPRequest& operator=(const OnGiveXPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnGiveXPRequest(OnGiveXPRequest&& from) noexcept
    : OnGiveXPRequest() {
    *this = ::std::move(from);
  }

  inline OnGiveXPRequest& operator=(OnGiveXPRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnGiveXPRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnGiveXPRequest* internal_default_instance() {
    return reinterpret_cast<const OnGiveXPRequest*>(
               &_OnGiveXPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OnGiveXPRequest* other);
  friend void swap(OnGiveXPRequest& a, OnGiveXPRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnGiveXPRequest* New() const final {
    return CreateMaybeMessage<OnGiveXPRequest>(NULL);
  }

  OnGiveXPRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnGiveXPRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnGiveXPRequest& from);
  void MergeFrom(const OnGiveXPRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnGiveXPRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .guldan.Context player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  private:
  const ::guldan::Context& _internal_player() const;
  public:
  const ::guldan::Context& player() const;
  ::guldan::Context* release_player();
  ::guldan::Context* mutable_player();
  void set_allocated_player(::guldan::Context* player);

  // .guldan.Context victim = 3;
  bool has_victim() const;
  void clear_victim();
  static const int kVictimFieldNumber = 3;
  private:
  const ::guldan::Context& _internal_victim() const;
  public:
  const ::guldan::Context& victim() const;
  ::guldan::Context* release_victim();
  ::guldan::Context* mutable_victim();
  void set_allocated_victim(::guldan::Context* victim);

  // uint32 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // uint32 xp_source = 4;
  void clear_xp_source();
  static const int kXpSourceFieldNumber = 4;
  ::google::protobuf::uint32 xp_source() const;
  void set_xp_source(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:guldan.OnGiveXPRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::guldan::Context* player_;
  ::guldan::Context* victim_;
  ::google::protobuf::uint32 amount_;
  ::google::protobuf::uint32 xp_source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnGiveXPResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guldan.OnGiveXPResponse) */ {
 public:
  OnGiveXPResponse();
  virtual ~OnGiveXPResponse();

  OnGiveXPResponse(const OnGiveXPResponse& from);

  inline OnGiveXPResponse& operator=(const OnGiveXPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnGiveXPResponse(OnGiveXPResponse&& from) noexcept
    : OnGiveXPResponse() {
    *this = ::std::move(from);
  }

  inline OnGiveXPResponse& operator=(OnGiveXPResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnGiveXPResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnGiveXPResponse* internal_default_instance() {
    return reinterpret_cast<const OnGiveXPResponse*>(
               &_OnGiveXPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OnGiveXPResponse* other);
  friend void swap(OnGiveXPResponse& a, OnGiveXPResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnGiveXPResponse* New() const final {
    return CreateMaybeMessage<OnGiveXPResponse>(NULL);
  }

  OnGiveXPResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnGiveXPResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnGiveXPResponse& from);
  void MergeFrom(const OnGiveXPResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnGiveXPResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:guldan.OnGiveXPResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_5fscript_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnGiveXPRequest

// .guldan.Context player = 1;
inline bool OnGiveXPRequest::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
inline const ::guldan::Context& OnGiveXPRequest::_internal_player() const {
  return *player_;
}
inline const ::guldan::Context& OnGiveXPRequest::player() const {
  const ::guldan::Context* p = player_;
  // @@protoc_insertion_point(field_get:guldan.OnGiveXPRequest.player)
  return p != NULL ? *p : *reinterpret_cast<const ::guldan::Context*>(
      &::guldan::_Context_default_instance_);
}
inline ::guldan::Context* OnGiveXPRequest::release_player() {
  // @@protoc_insertion_point(field_release:guldan.OnGiveXPRequest.player)
  
  ::guldan::Context* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::guldan::Context* OnGiveXPRequest::mutable_player() {
  
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::guldan::Context>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:guldan.OnGiveXPRequest.player)
  return player_;
}
inline void OnGiveXPRequest::set_allocated_player(::guldan::Context* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:guldan.OnGiveXPRequest.player)
}

// uint32 amount = 2;
inline void OnGiveXPRequest::clear_amount() {
  amount_ = 0u;
}
inline ::google::protobuf::uint32 OnGiveXPRequest::amount() const {
  // @@protoc_insertion_point(field_get:guldan.OnGiveXPRequest.amount)
  return amount_;
}
inline void OnGiveXPRequest::set_amount(::google::protobuf::uint32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:guldan.OnGiveXPRequest.amount)
}

// .guldan.Context victim = 3;
inline bool OnGiveXPRequest::has_victim() const {
  return this != internal_default_instance() && victim_ != NULL;
}
inline const ::guldan::Context& OnGiveXPRequest::_internal_victim() const {
  return *victim_;
}
inline const ::guldan::Context& OnGiveXPRequest::victim() const {
  const ::guldan::Context* p = victim_;
  // @@protoc_insertion_point(field_get:guldan.OnGiveXPRequest.victim)
  return p != NULL ? *p : *reinterpret_cast<const ::guldan::Context*>(
      &::guldan::_Context_default_instance_);
}
inline ::guldan::Context* OnGiveXPRequest::release_victim() {
  // @@protoc_insertion_point(field_release:guldan.OnGiveXPRequest.victim)
  
  ::guldan::Context* temp = victim_;
  victim_ = NULL;
  return temp;
}
inline ::guldan::Context* OnGiveXPRequest::mutable_victim() {
  
  if (victim_ == NULL) {
    auto* p = CreateMaybeMessage<::guldan::Context>(GetArenaNoVirtual());
    victim_ = p;
  }
  // @@protoc_insertion_point(field_mutable:guldan.OnGiveXPRequest.victim)
  return victim_;
}
inline void OnGiveXPRequest::set_allocated_victim(::guldan::Context* victim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(victim_);
  }
  if (victim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      victim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, victim, submessage_arena);
    }
    
  } else {
    
  }
  victim_ = victim;
  // @@protoc_insertion_point(field_set_allocated:guldan.OnGiveXPRequest.victim)
}

// uint32 xp_source = 4;
inline void OnGiveXPRequest::clear_xp_source() {
  xp_source_ = 0u;
}
inline ::google::protobuf::uint32 OnGiveXPRequest::xp_source() const {
  // @@protoc_insertion_point(field_get:guldan.OnGiveXPRequest.xp_source)
  return xp_source_;
}
inline void OnGiveXPRequest::set_xp_source(::google::protobuf::uint32 value) {
  
  xp_source_ = value;
  // @@protoc_insertion_point(field_set:guldan.OnGiveXPRequest.xp_source)
}

// -------------------------------------------------------------------

// OnGiveXPResponse

// uint32 amount = 1;
inline void OnGiveXPResponse::clear_amount() {
  amount_ = 0u;
}
inline ::google::protobuf::uint32 OnGiveXPResponse::amount() const {
  // @@protoc_insertion_point(field_get:guldan.OnGiveXPResponse.amount)
  return amount_;
}
inline void OnGiveXPResponse::set_amount(::google::protobuf::uint32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:guldan.OnGiveXPResponse.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace guldan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_5fscript_2eproto
