// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: guldan.proto

#include "guldan.pb.h"
#include "guldan.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace guldan {

static const char* Guldan_method_names[] = {
  "/guldan.Guldan/Connect",
};

std::unique_ptr< Guldan::Stub> Guldan::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Guldan::Stub> stub(new Guldan::Stub(channel));
  return stub;
}

Guldan::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(Guldan_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Guldan::Stub::Connect(::grpc::ClientContext* context, const ::guldan::GuldanConnectRequest& request, ::guldan::GuldanConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void Guldan::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::guldan::GuldanConnectRequest* request, ::guldan::GuldanConnectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::guldan::GuldanConnectResponse>* Guldan::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::guldan::GuldanConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::guldan::GuldanConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::guldan::GuldanConnectResponse>* Guldan::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::guldan::GuldanConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::guldan::GuldanConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

Guldan::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Guldan_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Guldan::Service, ::guldan::GuldanConnectRequest, ::guldan::GuldanConnectResponse>(
          std::mem_fn(&Guldan::Service::Connect), this)));
}

Guldan::Service::~Service() {
}

::grpc::Status Guldan::Service::Connect(::grpc::ServerContext* context, const ::guldan::GuldanConnectRequest* request, ::guldan::GuldanConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace guldan

